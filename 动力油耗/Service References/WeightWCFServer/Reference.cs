//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace 动力油耗.WeightWCFServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BackDataTpye", Namespace="http://schemas.datacontract.org/2004/07/LZ_TEST")]
    [System.SerializableAttribute()]
    public partial class BackDataTpye : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Code {
            get {
                return this.CodeField;
            }
            set {
                if ((this.CodeField.Equals(value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InputDataType", Namespace="http://schemas.datacontract.org/2004/07/LZ_TEST")]
    [System.SerializableAttribute()]
    public partial class InputDataType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CLHPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ZSField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CLHP {
            get {
                return this.CLHPField;
            }
            set {
                if ((object.ReferenceEquals(this.CLHPField, value) != true)) {
                    this.CLHPField = value;
                    this.RaisePropertyChanged("CLHP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ZS {
            get {
                return this.ZSField;
            }
            set {
                if ((this.ZSField.Equals(value) != true)) {
                    this.ZSField = value;
                    this.RaisePropertyChanged("ZS");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeightWCFServer.ILZServices")]
    public interface ILZServices {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILZServices/DoWork", ReplyAction="http://tempuri.org/ILZServices/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILZServices/DoWork", ReplyAction="http://tempuri.org/ILZServices/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILZServices/GetTestStatus", ReplyAction="http://tempuri.org/ILZServices/GetTestStatusResponse")]
        动力油耗.WeightWCFServer.BackDataTpye GetTestStatus();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILZServices/GetTestStatus", ReplyAction="http://tempuri.org/ILZServices/GetTestStatusResponse")]
        System.IAsyncResult BeginGetTestStatus(System.AsyncCallback callback, object asyncState);
        
        动力油耗.WeightWCFServer.BackDataTpye EndGetTestStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILZServices/SetTestStart", ReplyAction="http://tempuri.org/ILZServices/SetTestStartResponse")]
        动力油耗.WeightWCFServer.BackDataTpye SetTestStart(动力油耗.WeightWCFServer.InputDataType carinfo);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILZServices/SetTestStart", ReplyAction="http://tempuri.org/ILZServices/SetTestStartResponse")]
        System.IAsyncResult BeginSetTestStart(动力油耗.WeightWCFServer.InputDataType carinfo, System.AsyncCallback callback, object asyncState);
        
        动力油耗.WeightWCFServer.BackDataTpye EndSetTestStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILZServices/SetTestStop", ReplyAction="http://tempuri.org/ILZServices/SetTestStopResponse")]
        动力油耗.WeightWCFServer.BackDataTpye SetTestStop();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILZServices/SetTestStop", ReplyAction="http://tempuri.org/ILZServices/SetTestStopResponse")]
        System.IAsyncResult BeginSetTestStop(System.AsyncCallback callback, object asyncState);
        
        动力油耗.WeightWCFServer.BackDataTpye EndSetTestStop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILZServices/GetTestResult", ReplyAction="http://tempuri.org/ILZServices/GetTestResultResponse")]
        动力油耗.WeightWCFServer.BackDataTpye GetTestResult();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILZServices/GetTestResult", ReplyAction="http://tempuri.org/ILZServices/GetTestResultResponse")]
        System.IAsyncResult BeginGetTestResult(System.AsyncCallback callback, object asyncState);
        
        动力油耗.WeightWCFServer.BackDataTpye EndGetTestResult(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILZServicesChannel : 动力油耗.WeightWCFServer.ILZServices, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((动力油耗.WeightWCFServer.BackDataTpye)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetTestStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetTestStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((动力油耗.WeightWCFServer.BackDataTpye)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetTestStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetTestStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((动力油耗.WeightWCFServer.BackDataTpye)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTestResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTestResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((动力油耗.WeightWCFServer.BackDataTpye)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LZServicesClient : System.ServiceModel.ClientBase<动力油耗.WeightWCFServer.ILZServices>, 动力油耗.WeightWCFServer.ILZServices {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestStatusDelegate;
        
        private EndOperationDelegate onEndGetTestStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTestStartDelegate;
        
        private EndOperationDelegate onEndSetTestStartDelegate;
        
        private System.Threading.SendOrPostCallback onSetTestStartCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetTestStopDelegate;
        
        private EndOperationDelegate onEndSetTestStopDelegate;
        
        private System.Threading.SendOrPostCallback onSetTestStopCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTestResultDelegate;
        
        private EndOperationDelegate onEndGetTestResultDelegate;
        
        private System.Threading.SendOrPostCallback onGetTestResultCompletedDelegate;
        
        public LZServicesClient() {
        }
        
        public LZServicesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LZServicesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LZServicesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LZServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetTestStatusCompletedEventArgs> GetTestStatusCompleted;
        
        public event System.EventHandler<SetTestStartCompletedEventArgs> SetTestStartCompleted;
        
        public event System.EventHandler<SetTestStopCompletedEventArgs> SetTestStopCompleted;
        
        public event System.EventHandler<GetTestResultCompletedEventArgs> GetTestResultCompleted;
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            this.EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye GetTestStatus() {
            return base.Channel.GetTestStatus();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTestStatus(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestStatus(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public 动力油耗.WeightWCFServer.BackDataTpye EndGetTestStatus(System.IAsyncResult result) {
            return base.Channel.EndGetTestStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetTestStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTestStatus(callback, asyncState);
        }
        
        private object[] OnEndGetTestStatus(System.IAsyncResult result) {
            动力油耗.WeightWCFServer.BackDataTpye retVal = this.EndGetTestStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestStatusCompleted(object state) {
            if ((this.GetTestStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestStatusCompleted(this, new GetTestStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestStatusAsync() {
            this.GetTestStatusAsync(null);
        }
        
        public void GetTestStatusAsync(object userState) {
            if ((this.onBeginGetTestStatusDelegate == null)) {
                this.onBeginGetTestStatusDelegate = new BeginOperationDelegate(this.OnBeginGetTestStatus);
            }
            if ((this.onEndGetTestStatusDelegate == null)) {
                this.onEndGetTestStatusDelegate = new EndOperationDelegate(this.OnEndGetTestStatus);
            }
            if ((this.onGetTestStatusCompletedDelegate == null)) {
                this.onGetTestStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestStatusDelegate, null, this.onEndGetTestStatusDelegate, this.onGetTestStatusCompletedDelegate, userState);
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye SetTestStart(动力油耗.WeightWCFServer.InputDataType carinfo) {
            return base.Channel.SetTestStart(carinfo);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTestStart(动力油耗.WeightWCFServer.InputDataType carinfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTestStart(carinfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public 动力油耗.WeightWCFServer.BackDataTpye EndSetTestStart(System.IAsyncResult result) {
            return base.Channel.EndSetTestStart(result);
        }
        
        private System.IAsyncResult OnBeginSetTestStart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            动力油耗.WeightWCFServer.InputDataType carinfo = ((动力油耗.WeightWCFServer.InputDataType)(inValues[0]));
            return this.BeginSetTestStart(carinfo, callback, asyncState);
        }
        
        private object[] OnEndSetTestStart(System.IAsyncResult result) {
            动力油耗.WeightWCFServer.BackDataTpye retVal = this.EndSetTestStart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetTestStartCompleted(object state) {
            if ((this.SetTestStartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTestStartCompleted(this, new SetTestStartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTestStartAsync(动力油耗.WeightWCFServer.InputDataType carinfo) {
            this.SetTestStartAsync(carinfo, null);
        }
        
        public void SetTestStartAsync(动力油耗.WeightWCFServer.InputDataType carinfo, object userState) {
            if ((this.onBeginSetTestStartDelegate == null)) {
                this.onBeginSetTestStartDelegate = new BeginOperationDelegate(this.OnBeginSetTestStart);
            }
            if ((this.onEndSetTestStartDelegate == null)) {
                this.onEndSetTestStartDelegate = new EndOperationDelegate(this.OnEndSetTestStart);
            }
            if ((this.onSetTestStartCompletedDelegate == null)) {
                this.onSetTestStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTestStartCompleted);
            }
            base.InvokeAsync(this.onBeginSetTestStartDelegate, new object[] {
                        carinfo}, this.onEndSetTestStartDelegate, this.onSetTestStartCompletedDelegate, userState);
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye SetTestStop() {
            return base.Channel.SetTestStop();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetTestStop(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetTestStop(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public 动力油耗.WeightWCFServer.BackDataTpye EndSetTestStop(System.IAsyncResult result) {
            return base.Channel.EndSetTestStop(result);
        }
        
        private System.IAsyncResult OnBeginSetTestStop(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginSetTestStop(callback, asyncState);
        }
        
        private object[] OnEndSetTestStop(System.IAsyncResult result) {
            动力油耗.WeightWCFServer.BackDataTpye retVal = this.EndSetTestStop(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetTestStopCompleted(object state) {
            if ((this.SetTestStopCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetTestStopCompleted(this, new SetTestStopCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetTestStopAsync() {
            this.SetTestStopAsync(null);
        }
        
        public void SetTestStopAsync(object userState) {
            if ((this.onBeginSetTestStopDelegate == null)) {
                this.onBeginSetTestStopDelegate = new BeginOperationDelegate(this.OnBeginSetTestStop);
            }
            if ((this.onEndSetTestStopDelegate == null)) {
                this.onEndSetTestStopDelegate = new EndOperationDelegate(this.OnEndSetTestStop);
            }
            if ((this.onSetTestStopCompletedDelegate == null)) {
                this.onSetTestStopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetTestStopCompleted);
            }
            base.InvokeAsync(this.onBeginSetTestStopDelegate, null, this.onEndSetTestStopDelegate, this.onSetTestStopCompletedDelegate, userState);
        }
        
        public 动力油耗.WeightWCFServer.BackDataTpye GetTestResult() {
            return base.Channel.GetTestResult();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTestResult(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTestResult(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public 动力油耗.WeightWCFServer.BackDataTpye EndGetTestResult(System.IAsyncResult result) {
            return base.Channel.EndGetTestResult(result);
        }
        
        private System.IAsyncResult OnBeginGetTestResult(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetTestResult(callback, asyncState);
        }
        
        private object[] OnEndGetTestResult(System.IAsyncResult result) {
            动力油耗.WeightWCFServer.BackDataTpye retVal = this.EndGetTestResult(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTestResultCompleted(object state) {
            if ((this.GetTestResultCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTestResultCompleted(this, new GetTestResultCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTestResultAsync() {
            this.GetTestResultAsync(null);
        }
        
        public void GetTestResultAsync(object userState) {
            if ((this.onBeginGetTestResultDelegate == null)) {
                this.onBeginGetTestResultDelegate = new BeginOperationDelegate(this.OnBeginGetTestResult);
            }
            if ((this.onEndGetTestResultDelegate == null)) {
                this.onEndGetTestResultDelegate = new EndOperationDelegate(this.OnEndGetTestResult);
            }
            if ((this.onGetTestResultCompletedDelegate == null)) {
                this.onGetTestResultCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTestResultCompleted);
            }
            base.InvokeAsync(this.onBeginGetTestResultDelegate, null, this.onEndGetTestResultDelegate, this.onGetTestResultCompletedDelegate, userState);
        }
    }
}
